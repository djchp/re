generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  name     String? @unique
  Profile Profile?
  tweets Tweet[]
  likedTweets LikedTweet[]
  replies Reply[]
  Following Follow[]
}

model Follow {
  id Int @id @default(autoincrement())
  target String
  followId Int
  User User? @relation(fields: [UserId], references: [id])
  UserId Int?
  followedAt DateTime @default(now())
}

model Profile { 
  id Int @id @default(autoincrement())
  description String?
  createdAt DateTime @default(now())
  photo String? @default("https://abs.twimg.com/sticky/default_profile_images/default_profile_400x400.png")
  userId Int? @unique
  profileSite String?
  User  User? @relation(fields: [userId], references: [id])
  
}

model Tweet {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  body String?
  author User? @relation(fields: [authorId], references: [id])
  authorId Int?
  likes LikedTweet[]
  replies Reply[]
}

model LikedTweet {
  id Int @id @default(autoincrement())
  tweet Tweet @relation(fields: [tweedId], references: [id]) 
  tweedId Int
  likedAt DateTime @default(now())
  userId Int? 
  User User? @relation(fields: [userId], references: [id])
}

model Reply {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  body String?
  Tweet Tweet? @relation(fields: [tweetId], references: [id])
  tweetId Int?
  User User? @relation(fields: [userId], references: [id])
  userId Int?
  replies Reply[] @relation("ReplyToReply")
  Reply Reply? @relation("ReplyToReply", fields: [replyId], references: [id])
  replyId Int?
}

